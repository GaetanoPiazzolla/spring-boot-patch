/* tslint:disable */
/* eslint-disable */
/**
 * Sia Modulith API
 * This is the API description for the awesome brand new FAST SiA Modulith backend.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BookDTO
 */
export interface BookDTO {
    /**
     * 
     * @type {string}
     * @memberof BookDTO
     */
    'author'?: string;
    /**
     * 
     * @type {number}
     * @memberof BookDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BookDTO
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const JsonPatchOps = {
    Add: 'add',
    Remove: 'remove',
    Replace: 'replace',
    Move: 'move',
    Copy: 'copy',
    Test: 'test'
} as const;

export type JsonPatchOps = typeof JsonPatchOps[keyof typeof JsonPatchOps];


/**
 * 
 * @export
 * @interface JsonPatchValue
 */
export interface JsonPatchValue {
}
/**
 * 
 * @export
 * @interface VersionPatchOpsDTO
 */
export interface VersionPatchOpsDTO {
    /**
     * 
     * @type {JsonPatchOps}
     * @memberof VersionPatchOpsDTO
     */
    'op': JsonPatchOps;
    /**
     * 
     * @type {string}
     * @memberof VersionPatchOpsDTO
     */
    'path': VersionPatchOpsDTOPathEnum;
    /**
     * 
     * @type {JsonPatchValue}
     * @memberof VersionPatchOpsDTO
     */
    'value': JsonPatchValue;
}

export const VersionPatchOpsDTOPathEnum = {
    Title: '/title',
    AuthorId: '/author/id',
    Isbn: '/isbn'
} as const;

export type VersionPatchOpsDTOPathEnum = typeof VersionPatchOpsDTOPathEnum[keyof typeof VersionPatchOpsDTOPathEnum];


/**
 * BookControllerApi - axios parameter creator
 * @export
 */
export const BookControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBooks: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBooks', 'id', id)
            const localVarPath = `/api/v1/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Array<VersionPatchOpsDTO>} versionPatchOpsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBook: async (id: number, versionPatchOpsDTO: Array<VersionPatchOpsDTO>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateBook', 'id', id)
            // verify required parameter 'versionPatchOpsDTO' is not null or undefined
            assertParamExists('updateBook', 'versionPatchOpsDTO', versionPatchOpsDTO)
            const localVarPath = `/api/v1/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(versionPatchOpsDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookControllerApi - functional programming interface
 * @export
 */
export const BookControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBooks(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBooks(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookControllerApi.getBooks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Array<VersionPatchOpsDTO>} versionPatchOpsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBook(id: number, versionPatchOpsDTO: Array<VersionPatchOpsDTO>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBook(id, versionPatchOpsDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookControllerApi.updateBook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookControllerApi - factory interface
 * @export
 */
export const BookControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBooks(id: number, options?: any): AxiosPromise<BookDTO> {
            return localVarFp.getBooks(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Array<VersionPatchOpsDTO>} versionPatchOpsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBook(id: number, versionPatchOpsDTO: Array<VersionPatchOpsDTO>, options?: any): AxiosPromise<void> {
            return localVarFp.updateBook(id, versionPatchOpsDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookControllerApi - object-oriented interface
 * @export
 * @class BookControllerApi
 * @extends {BaseAPI}
 */
export class BookControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookControllerApi
     */
    public getBooks(id: number, options?: RawAxiosRequestConfig) {
        return BookControllerApiFp(this.configuration).getBooks(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Array<VersionPatchOpsDTO>} versionPatchOpsDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookControllerApi
     */
    public updateBook(id: number, versionPatchOpsDTO: Array<VersionPatchOpsDTO>, options?: RawAxiosRequestConfig) {
        return BookControllerApiFp(this.configuration).updateBook(id, versionPatchOpsDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



